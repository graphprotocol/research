####
# Many of the comments in this schema were inspired by,
# or pulled directly from:
# https://github.com/ethereum/wiki/wiki/JSON-RPC
####

type Ethereum {
  # Must provide a `number` or `hash` parameter, but not both.
  block(number: Int, hash: EthereumHash): EthereumBlock
  blocks(after: ID, before: ID, first: Int, last: Int, orderBy: _EthereumBlockScalarFields, orderDirection: Direction, skip: Int): [Blocks]
  earliest_block: EthereumBlock!
  latest_block: EthereumBlock!
  pending_block: EthereumBlock!
  transaction(hash: EthereumHash): EthereumTransaction
  transactions(after: ID, before: ID, first: Int, last: Int, orderBy: _EthereumTransactionScalarFields, orderDirection: Direction, skip: Int): [EthereumTransactions]!
}

type EthereumBlock {
  # Arbitrary data optionally included in the block
  extraData: Bytes32!
  # The difficulty level of this block
  difficulty: BigInt!
  # The current limit of gas expenditure per block
  gasLimit: Int!
  # The total used gas by all transactions in the block.
  gasUsed: Int!
  # Hash of the block. `null` when block is pending.
  hash: EthereumHash
  # The bloom filter for the logs of the block. `null` when block is pending.
  logsBloom: Bytes256
  # Hash of the generated proof-of-work. `null` when block is pending.
  nonce: Bytes8
  # The block number. `null` when block is pending.
  number: Int!
  # Miner of this block, to whom block rewards will be sent
  miner: EthereumAccount
  # Transactions that were included in this block
  transactions: [EthereumTransaction]!
  # The block created immediately prior to this block
  parent: EthereumBlock!
  # SHA-3 of the uncles data in the block
  sha3Uncles: EthereumHash!
  # The size of this block in bytes
  size: Int!
  # The root of the final state trie of this block
  stateRoot: EthereumHash!
  # Unix time (seconds since the Epoch)
  timestamp: Int!
  # The root of the transaction trie of the block
  transactionsRoot: EthereumHash!
  # The total difficulty of the chain until this block
  totalDifficulty: BigInt!
  # The uncles for this block
  uncles: [EthereumBlock]!
}

enum _EthereumBlockScalarFields {
  difficulty
  gasLimit
  gasUsed
  number
  miner_account
  miner_balance
  miner_account
  parent_number
  size
  timestamp
}

type EthereumTransaction {
  # Block where this transaction was included. `null` if pending.
  block: EthereumBlock!
  # Address of the sender
  from: EthereumAccount!
  # Gas provided by the sender
  gas: Int!
  # Gas price provided by the sender in Wei
  gasPrice: BigInt!
  # SHA-3 hash of this transaction
  hash: EthereumHash!
  # The data sent along with the transaction
  input: Bytes!
  # The number of transactions made by the sender prior to this one
  nonce: Int!
  # The receipt for this transaction. `null` if still pending.
  receipt: EthereumTransactionReceipt
  # Address of the receiver. `null` if contract creation.
  to: EthereumAccount
  # Integer of the transaction's index position in the block. `null` if
  # still pending.
  transactionIndex: Int
  # Value transferred in Wei
  value: BigInt!
}

enum _EthereumTransactionScalarFields {
  block_hash
  block_number
  from_account
  from_balance
  gas
  gasPrice
  nonce
  to_account
  to_balance
  trandactionIndex
  value
}

type EthereumTransactionReceipt {
  # The block this transaction receipt was included in
  block: EthereumBlock!
  # The created contract, if any. `null` otherwise.
  contract: EthereumAccount
  # The gas used by this and all preceding transactions in the block
  # it was included in
  cumulativeGasUsed: Int!
  # Address of the sender
  from: EthereumAccount!
  # The amount of gas used by this transaction
  gasUsed: Int!
  # The hash of the transaction to which this receipt corresponds
  transactionHash: EthereumHash!
  # Logs which this transaction generated
  logs: [EthereumLog]!
  # Bloom filter for light clients to quickly retrieve related logs
  logsBloom: Bytes256!
  # Address of the receiver. `null` when it is a contract creation transaction.
  to: EthereumAccount
  # The associated transaction
  transaction: Transaction!
}

type EthereumLog {
  # Address from which this log originated
  address: EthereumAccount!
  # The block this log was included in
  block: EthereumBlock
  # One or more non-indexed log arguments
  data: [Bytes32]!
  # Position in the block. `null` if pending.
  logIndex: Int
  # True if log has been removed due to chain reorganization. False if valid.
  removed: Boolean!
  # Between one and four indexed values associated with the log
  topics: [Bytes32]!
  # Transaction this log was included in. `null` if still pending.
  transaction: Transaction
}

type EthereumAccount {
  # Address of this account
  address: EthereumAddress!
  # Balance of this account in Wei
  balance: BigInt!
}

# Enum used for specifying the direction of sorting for entity collections
enum Direction {
  asc
  desc
}

# EthereumAddress is a 20 byte hex-encoded string prefixed with a "0x"
scalar EthereumAddress
# EthereumHash values are hex-encoded KECCAK-256 SHA-3 strings with a "0x"
# prefix
scalar EthereumHash

# Bytes scalar values will be sent over the wire as a Base64 encoded String
scalar Bytes8
scalar Bytes32
scalar Bytes256
# Unsized bytes array
scalar Bytes

# Numeric scalars
scalar BigInt
